name: Google Mobile Ads Mediation UPM Package Release

on:
  push:
    branches:
      - main
    paths:
      - '**/CHANGELOG.md'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find changed package folder
        id: pkg
        run: |
          # Only consider directories containing a package.json file
          PKG_DIR=""
          git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | while read FILE; do
            if [[ $(basename "$FILE" | tr '[:upper:]' '[:lower:]') == "changelog.md" ]]; then
              DIR=$(dirname "$FILE")
              if [ -f "$DIR/package.json" ]; then
                PKG_DIR="$DIR"
                break
              fi
            fi
          done
          if [ -z "$PKG_DIR" ]; then
            echo "No valid package directory found!"
            exit 1
          fi
          echo "pkg_dir=$PKG_DIR" >> $GITHUB_OUTPUT

      - name: Extract version from CHANGELOG.md
        id: version
        run: |
          VERSION=$(grep -m1 -Eo #*\s*\[Version *\[?v?([0-9]+\.[0-9]+\.[0-9]+)\]? "$PKG_DIR/CHANGELOG.md" | grep -Eo '([0-9]+\.[0-9]+\.[0-9]+)')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify package.json version
        run: |
          PKG_JSON="$PKG_DIR/package.json"
          PKG_VERSION=$(jq -r .version "$PKG_JSON")
          if [ "$PKG_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch: package.json ($PKG_VERSION) vs CHANGELOG.md (${{ steps.version.outputs.version }})"
            exit 1
          fi

      - name: Extract release notes
        id: notes
        run: |
          NOTES=$(awk '/^#### \[Version /{i++}i==1{print}' "$PKG_DIR/CHANGELOG.md" | tail -n +2)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release tag and GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${PKG_DIR}/v${{ steps.version.outputs.version }}"
          git tag "$TAG"
          git push origin "$TAG"
          gh release create "$TAG" --title "$TAG" --notes "${{ steps.notes.outputs.notes }}"
