/*
*   Gradle file to build a Unity package to add Chartboost mediation support to the Google Mobile
*   Ads Unity plugin.
*   Usage: ./gradlew exportPackage
*/
defaultTasks 'exportPackage'

// Project level variables.
project.ext {
    unity_exe = System.getProperty("UNITY_EXE")
    if (unity_exe == null || unity_exe.isEmpty()) {
        unity_exe = System.getenv("UNITY_EXE")
    }
    if (unity_exe == null || unity_exe.isEmpty()) {
        unity_exe = '/Applications/Unity/Unity.app/Contents/MacOS/Unity'
    }

    if (!file(unity_exe).exists()) {
        throw new GradleException('Unable to locate installation of Unity. Please create a ' +
                'UNITY_EXE environment variable and point it to your Unity installation.')
    }

    versionString = '4.6.0'
    adapterName = 'Chartboost'
    pluginName = "GoogleMobileAds${adapterName}Mediation"
    pluginFileName = "${pluginName}.unitypackage"
    zipName = "${adapterName}UnityAdapter-${versionString}"
    zipFileName = "${zipName}.zip"
    pluginSource = file('source/plugin').absolutePath
    pluginBuildDir = file('temp/plugin-build-dir').absolutePath
    buildPath = file('temp').absolutePath
    exportPath = file(pluginFileName).absolutePath
}

// Build unity package using through command line interface.
// Create new unity project with files in temporary build directory and export files to a unity package.
// Command line usage and arguments documented at http://docs.unity3d.com/Manual/CommandLineArguments.html.
task exportPackage(type: Exec) {
    description = "Creates and exports the Plugin unity package"
    executable "${unity_exe}"
    args "-g.building",
            "-batchmode",
            "-projectPath", "${pluginBuildDir}",
            "-logFile", "temp/unity.log",
            "-exportPackage",
            "Assets/GoogleMobileAds",
            "${exportPath}",
            "-quit"

    ignoreExitValue true

    doLast {
        if (executionResult.get().exitValue != 0) {
            copy {
                from "temp/"
                into "./"
                include "unity.log"
            }
        }
    }
}

task createTempBuildFolder(type: Copy) {
    from { "${pluginSource}" }
    into { "${pluginBuildDir}" }
}

task clearTempBuildFolder(type: Delete) {
    delete { "${buildPath}" }
}

exportPackage.dependsOn(createTempBuildFolder)
exportPackage.finalizedBy(clearTempBuildFolder)

/**
 * Delete task to delete any previously generated .zip files by makeZip task.
 * makeZip depends on this task.
 */
task clearZip(type: Delete) {
    // Targets to be deleted.
    delete(zipFileName)
}

/**
 * Zip task to make a zip archive. This task depends on exportPackage and clearZip tasks.
 */
task makeZip(type: Zip) {
    // Targets to be added to the zip archive.
    from('./' + pluginFileName, './README.md')
    from('./' + pluginFileName, './LICENSE')
    // Root directory name for the zip archive.
    into(zipName)
    // Name of the zip archive.
    archiveFileName = zipFileName
    // Destination directory in which the archive needs to be saved.
    destinationDirectory = file('.')
}

makeZip.dependsOn([clearZip, exportPackage])
makeZip.mustRunAfter([clearZip, exportPackage])
